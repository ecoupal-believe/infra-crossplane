apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: apisix.vma.believe.com
spec:
  compositeTypeRef:
    apiVersion: vma.believe.com/v1alpha1
    kind: xApisix
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
            - type: Reference
              ref:
                name: aws-config
    - step: render-templates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        delims:
          left: '[['
          right: ']]'
        source: Inline
        inline:
          template: |
            [[ $resourceName:= dig "composite" "resource" "metadata" "labels" "crossplane.io/claim-name" "" $.observed ]]
            apiVersion: vma.believe.com/v1alpha1
            kind: xS3
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket
                crossplane.io/external-name: [[ $resourceName ]]
            spec:
              compositionSelector:
                matchLabels:
                  vma.believe.com/provider: aws
                  s3.vma.believe.com/type: logs
              resourceConfig:
                providerRef: [[ .observed.composite.resource.spec.resourceConfig.providerRef ]]
                [[ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil ]]
                deletionPolicy: [[ .observed.composite.resource.spec.resourceConfig.deletionPolicy ]]
                [[ end ]]
                name: [[ .observed.composite.resource.spec.logConfiguration.bucketName ]]
                region: [[ .observed.composite.resource.spec.logConfiguration.bucketRegion ]]
            ---
            [[ if ne (dig "resources" "bucket" "resource" "status" "bucketArn" "" $.observed) "" ]]
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: release
                crossplane.io/external-name: [[ $resourceName ]]
            spec:
              providerConfigRef:
                name:  helm-provider
              [[ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil ]]
              deletionPolicy: [[ .observed.composite.resource.spec.resourceConfig.deletionPolicy ]]
              [[ end ]]
              forProvider:
                namespace: [[ dig "composite" "resource" "metadata" "labels" "crossplane.io/claim-namespace" "" $.observed ]]
                chart:
                  name: apisix
                  repository: https://charts.apiseven.com
                  version: 1.11.0
                values:
                  logs:
                    errorLogLevel: "warn"
                  
                  admin:
                    credentials:
                      admin: [[ .observed.composite.resource.spec.adminKey ]]
                      viewer: [[ .observed.composite.resource.spec.viewerKey ]]
                  
                  etcd:
                    persistentVolumeClaimRetentionPolicy:
                      enabled: true
                      whenDeleted: Delete
                      whenScaled: Delete
                    removeMemberOnContainerTermination: false
                    replicaCount: [[ default 1 .observed.composite.resource.spec.etcdReplicaCount ]]
                    commonLabels:
                      tags.datadoghq.com/env: [[ index .context "apiextensions.crossplane.io/environment" "env" ]]
                      tags.datadoghq.com/service: "apisix-etcd"
                    commonAnnotations:
                      ad.datadoghq.com/etcd.logs: '[{"source": "etcd"}]'
                    host:
                    [[- range $i:= until (.observed.composite.resource.spec.etcdReplicaCount | int)  ]]
                    - http://apisix-etcd-[[ $i ]].apisix-etcd-headless.ingress-apisix.svc.cluster.local:2379
                    [[ end ]]
                  dashboard:
                    enabled: false
                  
                  gateway:
                    type: LoadBalancer
                    tls:
                      enabled: true
                      containerPort: 9080
                    annotations:
                      service.beta.kubernetes.io/aws-load-balancer-type: external
                      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
                      service.beta.kubernetes.io/aws-load-balancer-subnets: [[ (index .context "apiextensions.crossplane.io/environment" "vpcSubnetsIds") | join "," ]]
                      service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: owner=apisix
                      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
                      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: apisix-gateway-tls
                      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: [[ index .context "apiextensions.crossplane.io/environment" "wildcardCertificateArn" ]]
                      service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=false
                      service.beta.kubernetes.io/aws-load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=[[ .observed.composite.resource.spec.logConfiguration.bucketName ]]
                    labelsOverride:
                      app.kubernetes.io/name: "{{ .Release.Name }}"
                      app.kubernetes.io/instance: '{{ include "apisix.name" . }}'
                      tags.datadoghq.com/env: [[ index .context "apiextensions.crossplane.io/environment" "env" ]]
                      tags.datadoghq.com/service: apisix
                  
                  ingress-controller:
                    enabled: true
                    config:
                      logLevel: "info"
                      ingressPublishService: ingress-apisix/apisix-gateway
                      pluginMetadataCM: plugin-metadata-config-map
                      apisix:
                        serviceNamespace: ingress-apisix
                        adminKey: [[ .observed.composite.resource.spec.adminKey ]]
                    labelsOverride:
                      app.kubernetes.io/name: "{{ .Release.Name }}"
                      app.kubernetes.io/instance: '{{ include "apisix-ingress-controller.name" . }}'
                      tags.datadoghq.com/env: [[ index .context "apiextensions.crossplane.io/environment" "env" ]]
                      tags.datadoghq.com/service: apisix-ingress-controller
                    [[ if ne $.observed.composite.resource.spec.ingressControllerVersion nil ]]
                    image:
                      tag: [[ .observed.composite.resource.spec.ingressControllerVersion ]]
                    [[ end ]]
                  
                  customPlugins:
                    enabled: true
                    plugins:
                      - name: custom-openid-connect
                        configMap:
                          name: custom-openid-connect-plugin
                          mounts:
                            - key: custom-openid-connect.lua
                              path: /opts/custom_plugins/apisix/plugins/custom-openid-connect.lua
                      - name: custom-datadog
                        configMap:
                          name: custom-datadog-plugin
                          mounts:
                            - key: custom-datadog.lua
                              path: /opts/custom_plugins/apisix/plugins/custom-datadog.lua
                  
                  configurationSnippet:
                    httpStart: |
                      large_client_header_buffers 4 16k;
                  
                  apisix:
                    enableIPv6: false
                   [[ if ne $.observed.composite.resource.spec.apisixVersion nil ]]
                    image:
                      tag: [[ .observed.composite.resource.spec.apisixVersion ]]
                   [[ end ]]
                  
                  plugins:
                    - real-ip
                    - ai
                    - client-control
                    - proxy-control
                    - request-id
                    - ext-plugin-pre-req
                    - fault-injection
                    - mocking
                    - serverless-pre-function
                    - cors
                    - ip-restriction
                    - ua-restriction
                    - referer-restriction
                    - csrf
                    - uri-blocker
                    - request-validation
                    - multi-auth
                    - openid-connect
                    - cas-auth
                    - wolf-rbac
                    - ldap-auth
                    - hmac-auth
                    - basic-auth
                    - jwt-auth
                    - jwe-decrypt
                    - key-auth
                    - consumer-restriction
                    - forward-auth
                    - opa
                    - authz-keycloak
                    - proxy-cache
                    - body-transformer
                    - proxy-mirror
                    - proxy-rewrite
                    - workflow
                    - api-breaker
                    - limit-conn
                    - limit-count
                    - limit-req
                    - gzip
                    - server-info
                    - traffic-split
                    - redirect
                    - response-rewrite
                    - degraphql
                    - kafka-proxy
                    - grpc-transcode
                    - grpc-web
                    - public-api
                    - prometheus
                    - datadog
                    - echo
                    - http-logger
                    - google-cloud-logging
                    - sls-logger
                    - tcp-logger
                    - kafka-logger
                    - rocketmq-logger
                    - syslog
                    - udp-logger
                    - file-logger
                    - clickhouse-logger
                    - tencent-cloud-cls
                    - inspect
                    - openfunction
                    - serverless-post-function
                    - ext-plugin-post-req
                    - ext-plugin-post-resp
            [[ end ]]
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
