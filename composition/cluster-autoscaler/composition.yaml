apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: clusterautoscalers.vma.believe.com
spec:
  compositeTypeRef:
    apiVersion: vma.believe.com/v1alpha1
    kind: xClusterAutoscaler
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
            - type: Reference
              ref:
                name: aws-config
    - step: render-templates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{$resourceName:= dig "composite" "resource" "metadata" "labels" "crossplane.io/claim-name" "" $.observed}}
            apiVersion: vma.believe.com/v1alpha1
            kind: xIRSA
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ print $resourceName "-irsa" }}
                crossplane.io/external-name: {{ $resourceName }}
            spec:
              serviceAccountName: {{ .observed.composite.resource.spec.serviceAccountName }}
              resourceConfig:
                {{ .observed.composite.resource.spec.resourceConfig | toYaml | nindent 4 }}
            status:
              roleName: {{ .desired.composite.resource.status.roleName }}
              roleArn: {{ .desired.composite.resource.status.roleArn }}
            ---
            apiVersion: vma.believe.com/v1alpha1
            kind: xIAMPolicy
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ print $resourceName "-policy" }}
            spec:
              compositionSelector:
                matchLabels:
                  vma.believe.com/provider: aws
                  iampolicies.vma.believe.com/policy-type: write
                  iampolicies.vma.believe.com/service: autoscaler
              resourceArn: {{ index .context "apiextensions.crossplane.io/environment" "eksClusterName" }}
              roleName: {{ (dig "resources" (print $resourceName "-irsa") "resource" "status" "roleName" "" $.observed ) }}
              resourceConfig:
                {{ .observed.composite.resource.spec.resourceConfig | toYaml | nindent 4 }}
            ---
            {{ if ne (dig "resources" (print $resourceName "-irsa") "resource" "status" "roleArn" "" $.observed ) "" }}
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ print $resourceName "-release" }}
                crossplane.io/external-name: {{ $resourceName }}
            spec:
              providerConfigRef:
                name:  helm-provider
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                namespace: {{ dig "composite" "resource" "metadata" "labels" "crossplane.io/claim-namespace" "" $.observed }}
                chart:
                  name: cluster-autoscaler
                  repository: https://kubernetes.github.io/autoscaler
                  version: 9.36.0
                values:
                  awsRegion: "{{ index .context "apiextensions.crossplane.io/environment" "awsAccountID" }}"
                  
                  extraArgs:
                    ignore-daemonsets-utilization: true # Whether DaemonSet pods will be ignored when calculating resource utilization for scaling down
                  
                  rbac:
                    serviceAccount:
                      name: {{ (dig "resources" (print $resourceName "-irsa") "resource" "status" "roleName" "" $.observed ) }}
                      annotations:
                        eks.amazonaws.com/role-arn: {{ dig "resources" (print $resourceName "-irsa") "resource" "status" "roleArn" "" $.observed }}
                  
                  additionalLabels:
                    tags.datadoghq.com/env: {{ index .context "apiextensions.crossplane.io/environment" "env" }}
                    tags.datadoghq.com/service: cluster-autoscaler
                  
                  autoscalingGroups:
                  {{ range .observed.composite.resource.spec.autoscalingGroups }}
                  - name: {{ .name }}
                    minSize: {{ .minSize }}
                    maxSize: {{ .maxSize }}
                  {{ end }}
            {{ end }}
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
