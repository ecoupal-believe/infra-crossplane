apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: standard.s3.vma.believe.com
  labels:
    vma.believe.com/provider: aws
    s3.vma.believe.com/type: standard
spec:
  compositeTypeRef:
    apiVersion: vma.believe.com/v1alpha1
    kind: xS3
  mode: Pipeline
  pipeline:
    - step: render-templates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: Bucket
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket
                crossplane.io/external-name: {{ .observed.composite.resource.spec.resourceConfig.name }}
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.resourceConfig.providerRef }}
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                region: {{ .observed.composite.resource.spec.resourceConfig.region }}
                forceDestroy: {{ default false .observed.composite.resource.spec.forceDestroy }}
                {{ if ne $.observed.composite.resource.spec.resourceConfig.tags nil }}
                tags: {{ .observed.composite.resource.spec.resourceConfig.tags | toYaml | nindent 6 }}
                {{ end }}
            ---
            {{ if ne (dig "resources" "bucket" "resource" "status" "atProvider" "arn" "" $.observed) "" }}
            apiVersion: vma.believe.com/v1alpha1
            kind: xS3
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket-composition
            status:
              bucketName: {{ dig "resources" "bucket" "resource" "status" "atProvider" "id" "" $.observed }}
              bucketArn: {{ dig "resources" "bucket" "resource" "status" "atProvider" "arn" "" $.observed }}
            {{ end }}
            ---
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: BucketPublicAccessBlock
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: block
                crossplane.io/external-name: {{ .observed.composite.resource.spec.resourceConfig.name }}
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.resourceConfig.providerRef }}
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                blockPublicAcls: true
                blockPublicPolicy: true
                ignorePublicAcls: true
                restrictPublicBuckets: true
                region: {{ .observed.composite.resource.spec.resourceConfig.region }}
                bucketSelector:
                  matchControllerRef: true
            ---
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: BucketOwnershipControls
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: owner
                crossplane.io/external-name: {{ .observed.composite.resource.spec.resourceConfig.name }}
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.resourceConfig.providerRef }}
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                rule:
                - objectOwnership: BucketOwnerPreferred
                region: {{ .observed.composite.resource.spec.resourceConfig.region }}
                bucketSelector:
                  matchControllerRef: true
            ---
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: BucketACL
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: acl
                crossplane.io/external-name: {{ .observed.composite.resource.spec.resourceConfig.name }}
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.resourceConfig.providerRef }}
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                region: {{ .observed.composite.resource.spec.resourceConfig.region }}
                acl: private
                bucketSelector:
                  matchControllerRef: true
            ---
            {{ if ne $.observed.composite.resource.spec.resourceConfig.lifecyclePolicies nil }}
            apiVersion: s3.aws.upbound.io/v1beta1
            kind: BucketLifecycleConfiguration
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: lifecycle
                crossplane.io/external-name: {{ .observed.composite.resource.spec.resourceConfig.name }}
            spec:
              providerConfigRef:
                name: {{ .observed.composite.resource.spec.resourceConfig.providerRef }}
              {{ if ne $.observed.composite.resource.spec.resourceConfig.deletionPolicy nil }}
              deletionPolicy: {{ .observed.composite.resource.spec.resourceConfig.deletionPolicy }}
              {{ end }}
              forProvider:
                region: {{ .observed.composite.resource.spec.resourceConfig.region }}
                rule:
                  {{ range .observed.composite.resource.spec.resourceConfig.lifecyclePolicies }}
                  {{ . | nindent 6 }}
                  {{ end }}
                bucketSelector:
                  matchControllerRef: true
            {{ end }}
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
