apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: write-load-balancer.iampolicies.vma.believe.com
  labels:
    vma.believe.com/provider: aws
    iampolicies.vma.believe.com/policy-type: write
    iampolicies.vma.believe.com/service: load-balancer
spec:
  compositeTypeRef:
    apiVersion: vma.believe.com/v1alpha1
    kind: xIAMPolicy
  patchSets:
    - name: common-fields
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.providerRef
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "policy-load-balancer-write-%s"
  resources:
    - name: write-policy
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Policy
        spec:
          deletionPolicy: Delete
          forProvider:
            policy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "VisualEditor0",
                    "Action": "iam:CreateServiceLinkedRole",
                    "Condition": {
                      "StringEquals": {
                        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor1",
                    "Action": [
                      "elasticloadbalancing:DescribeTrustStores",
                      "elasticloadbalancing:DescribeTargetHealth",
                      "elasticloadbalancing:DescribeTargetGroups",
                      "elasticloadbalancing:DescribeTargetGroupAttributes",
                      "elasticloadbalancing:DescribeTags",
                      "elasticloadbalancing:DescribeSSLPolicies",
                      "elasticloadbalancing:DescribeRules",
                      "elasticloadbalancing:DescribeLoadBalancers",
                      "elasticloadbalancing:DescribeLoadBalancerAttributes",
                      "elasticloadbalancing:DescribeListeners",
                      "elasticloadbalancing:DescribeListenerCertificates",
                      "ec2:GetCoipPoolUsage",
                      "ec2:DescribeVpcs",
                      "ec2:DescribeVpcPeeringConnections",
                      "ec2:DescribeTags",
                      "ec2:DescribeSubnets",
                      "ec2:DescribeSecurityGroups",
                      "ec2:DescribeNetworkInterfaces",
                      "ec2:DescribeInternetGateways",
                      "ec2:DescribeInstances",
                      "ec2:DescribeCoipPools",
                      "ec2:DescribeAvailabilityZones",
                      "ec2:DescribeAddresses",
                      "ec2:DescribeAccountAttributes"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor2",
                    "Action": [
                      "wafv2:GetWebACLForResource",
                      "wafv2:GetWebACL",
                      "wafv2:DisassociateWebACL",
                      "wafv2:AssociateWebACL",
                      "waf-regional:GetWebACLForResource",
                      "waf-regional:GetWebACL",
                      "waf-regional:DisassociateWebACL",
                      "waf-regional:AssociateWebACL",
                      "shield:GetSubscriptionState",
                      "shield:DescribeProtection",
                      "shield:DeleteProtection",
                      "shield:CreateProtection",
                      "iam:ListServerCertificates",
                      "iam:GetServerCertificate",
                      "cognito-idp:DescribeUserPoolClient",
                      "acm:ListCertificates",
                      "acm:DescribeCertificate"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor3",
                    "Action": [
                      "ec2:RevokeSecurityGroupIngress",
                      "ec2:CreateSecurityGroup",
                      "ec2:AuthorizeSecurityGroupIngress"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor4",
                    "Action": "ec2:CreateTags",
                    "Condition": {
                      "Null": {
                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                      },
                      "StringEquals": {
                        "ec2:CreateAction": "CreateSecurityGroup"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "arn:aws:ec2:*:*:security-group/*"
                  },
                  {
                    "Sid": "VisualEditor5",
                    "Action": [
                      "ec2:DeleteTags",
                      "ec2:CreateTags"
                    ],
                    "Condition": {
                      "Null": {
                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "arn:aws:ec2:*:*:security-group/*"
                  },
                  {
                    "Sid": "VisualEditor6",
                    "Action": [
                      "ec2:RevokeSecurityGroupIngress",
                      "ec2:DeleteSecurityGroup",
                      "ec2:AuthorizeSecurityGroupIngress"
                    ],
                    "Condition": {
                      "Null": {
                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor7",
                    "Action": [
                      "elasticloadbalancing:CreateTargetGroup",
                      "elasticloadbalancing:CreateLoadBalancer",
                      "elasticloadbalancing:AddTags"
                    ],
                    "Condition": {
                      "Null": {
                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor8",
                    "Action": [
                      "elasticloadbalancing:DeleteRule",
                      "elasticloadbalancing:DeleteListener",
                      "elasticloadbalancing:CreateRule",
                      "elasticloadbalancing:CreateListener",
                      "elasticloadbalancing:AddTags"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor9",
                    "Action": [
                      "elasticloadbalancing:RemoveTags",
                      "elasticloadbalancing:AddTags"
                    ],
                    "Condition": {
                      "Null": {
                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": [
                      "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                      "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                      "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                    ]
                  },
                  {
                    "Sid": "VisualEditor10",
                    "Action": [
                      "elasticloadbalancing:RemoveTags",
                      "elasticloadbalancing:AddTags"
                    ],
                    "Effect": "Allow",
                    "Resource": [
                      "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                      "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                      "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                      "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                    ]
                  },
                  {
                    "Sid": "VisualEditor11",
                    "Action": [
                      "elasticloadbalancing:SetSubnets",
                      "elasticloadbalancing:SetSecurityGroups",
                      "elasticloadbalancing:SetIpAddressType",
                      "elasticloadbalancing:ModifyTargetGroupAttributes",
                      "elasticloadbalancing:ModifyTargetGroup",
                      "elasticloadbalancing:ModifyLoadBalancerAttributes",
                      "elasticloadbalancing:DeleteTargetGroup",
                      "elasticloadbalancing:DeleteLoadBalancer"
                    ],
                    "Condition": {
                      "Null": {
                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                      }
                    },
                    "Effect": "Allow",
                    "Resource": "*"
                  },
                  {
                    "Sid": "VisualEditor12",
                    "Action": "elasticloadbalancing:AddTags",
                    "Condition": {
                      "Null": {
                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                      },
                      "StringEquals": {
                        "elasticloadbalancing:CreateAction": [
                          "CreateTargetGroup",
                          "CreateLoadBalancer"
                        ]
                      }
                    },
                    "Effect": "Allow",
                    "Resource": [
                      "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                      "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                      "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                    ]
                  },
                  {
                    "Sid": "VisualEditor13",
                    "Action": [
                      "elasticloadbalancing:RegisterTargets",
                      "elasticloadbalancing:DeregisterTargets"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                  },
                  {
                    "Sid": "VisualEditor14",
                    "Action": [
                      "elasticloadbalancing:SetWebAcl",
                      "elasticloadbalancing:RemoveListenerCertificates",
                      "elasticloadbalancing:ModifyRule",
                      "elasticloadbalancing:ModifyListener",
                      "elasticloadbalancing:AddListenerCertificates"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                  }
                ]
              }
      patches:
        - type: PatchSet
          patchSetName: common-fields
        - type: FromCompositeFieldPath
          fromFieldPath: spec.resourceConfig.tags
          toFieldPath: spec.forProvider.tags
          policy:
            mergeOptions:
              keepMapValues: true
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.policyArn
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "policy-load-balancer-write-%s"
    - name: policy-attachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          deletionPolicy: Delete
          forProvider:
            policyArnSelector:
              matchControllerRef: true
            roleSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-fields
        - type: FromCompositeFieldPath
          fromFieldPath: spec.roleName
          toFieldPath: spec.forProvider.role
        - type: FromCompositeFieldPath
          fromFieldPath: status.policyArn
          toFieldPath: spec.forProvider.policyArn